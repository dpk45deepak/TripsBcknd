<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>TripBcknd — Developer Documentation</title>
        <link
            href="https://cdn.jsdelivr.net/npm/tailwindcss@3.4.1/dist/tailwind.min.css"
            rel="stylesheet"
        />
        <link rel="icon" type="image/png" href="/app.png" />
        <link
            rel="stylesheet"
            href="https://unpkg.com/aos@2.3.4/dist/aos.css"
        />
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
        <style>
            body { font-family: 'Inter', system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial; }
            pre code { white-space: pre-wrap; }
        </style>
    </head>

    <body class="bg-white text-gray-800 font-['Inter'] overflow-x-hidden">
        <!-- Navbar (same pattern as index.ejs) -->
        <nav class="flex items-center justify-between px-6 py-4 glass-effect sticky top-0 z-50 shadow-sm bg-white/60 backdrop-blur">
            <div class="flex items-center space-x-3">
                <div class="w-3 h-3 rounded-full bg-teal-500"></div>
                <h1 class="text-xl font-bold tracking-tight gradient-text">TripBcknd</h1>
            </div>

            <div class="flex items-center space-x-4 flex-wrap">
                <a href="/" class="text-gray-600 hover:text-teal-600 font-medium">Home</a>
                <a href="/documents" class="text-gray-600 hover:text-teal-600 font-medium">Docs</a>
                <a href="/auth" class="px-4 py-2 rounded-lg bg-gradient-to-r from-teal-500 to-blue-600 text-white font-semibold shadow-md">Admin</a>
            </div>
        </nav>

        <main class="max-w-6xl mx-auto p-6">
            <header class="text-center my-8">
                <h2 class="text-3xl sm:text-4xl md:text-5xl font-extrabold mb-3">Developer Docs — TripBcknd</h2>
                <p class="text-gray-600 max-w-2xl mx-auto">A focused reference to help frontend developers integrate with the backend quickly.</p>
            </header>

            <section class="grid gap-8 md:grid-cols-3">
                <aside class="md:col-span-1">
                    <div class="sticky top-28 space-y-4">
                        <nav class="text-sm text-gray-700">
                            <a href="#quick-start" class="block py-2 hover:text-teal-600">Quick start</a>
                            <a href="#env" class="block py-2 hover:text-teal-600">Environment</a>
                            <a href="#auth" class="block py-2 hover:text-teal-600">Auth</a>
                            <a href="#endpoints" class="block py-2 hover:text-teal-600">Endpoints</a>
                            <a href="#frontend" class="block py-2 hover:text-teal-600">Frontend integration</a>
                            <a href="#wire" class="block py-2 hover:text-teal-600">Wire to routes</a>
                        </nav>
                    </div>
                </aside>

                <article class="md:col-span-2 space-y-8">
                    <section id="quick-start">
                        <h3 class="text-2xl font-semibold mb-3">Quick start</h3>
                        <ol class="list-decimal list-inside text-gray-700">
                            <li>Install dependencies: <code class="bg-gray-100 px-1 rounded">npm install</code></li>
                            <li>Configure environment variables (example below)</li>
                            <li>Run the server: <code class="bg-gray-100 px-1 rounded">node index.js</code> or <code class="bg-gray-100 px-1 rounded">npm start</code></li>
                        </ol>
                    </section>

                    <section id="env">
                        <h3 class="text-2xl font-semibold mb-3">Environment variables</h3>
                        <pre class="rounded-lg p-4 bg-slate-900 text-sky-100 overflow-auto"><code>PORT=3000
DB_URI=mongodb://localhost:27017/trips
JWT_SECRET=your_jwt_secret_here
NODE_ENV=development
</code></pre>
                    </section>

                    <section id="auth">
                        <h3 class="text-2xl font-semibold mb-3">Auth flow (summary)</h3>
                        <ul class="list-disc list-inside text-gray-700">
                            <li>Frontend posts credentials to <code class="bg-gray-100 px-1 rounded">/api/auth/login</code> or <code class="bg-gray-100 px-1 rounded">/api/auth/register</code>.</li>
                            <li>On success the server returns a JWT token; include it in <code class="bg-gray-100 px-1 rounded">Authorization: Bearer &lt;token&gt;</code> for protected calls.</li>
                            <li>Store tokens carefully (see recommendations below).</li>
                        </ul>
                    </section>

                    <section id="endpoints">
                        <h3 class="text-2xl font-semibold mb-3">Important endpoints</h3>
                        <div class="grid gap-4 sm:grid-cols-2">
                            <div class="p-4 bg-white rounded-lg border">
                                <h4 class="font-semibold">Auth</h4>
                                <ul class="text-sm text-gray-700 mt-2">
                                    <li>POST <code class="bg-gray-100 px-1 rounded">/api/auth/register</code></li>
                                    <li>POST <code class="bg-gray-100 px-1 rounded">/api/auth/login</code></li>
                                </ul>
                            </div>
                            <div class="p-4 bg-white rounded-lg border">
                                <h4 class="font-semibold">Destinations</h4>
                                <ul class="text-sm text-gray-700 mt-2">
                                    <li>GET <code class="bg-gray-100 px-1 rounded">/api/destinations</code></li>
                                    <li>GET <code class="bg-gray-100 px-1 rounded">/api/destinations/:id</code></li>
                                    <li>POST/PUT/DELETE — protected</li>
                                </ul>
                            </div>
                        </div>
                    </section>

                    <section id="frontend">
                        <h3 class="text-2xl font-semibold mb-3">Frontend integration (examples)</h3>
                        <p class="text-gray-700 mb-3">Pick fetch or axios — both examples below are friendly for SPAs.</p>

                        <div class="bg-slate-900 text-sky-100 rounded-lg p-4 overflow-auto">
                            <h5 class="font-medium mb-2">Login (fetch)</h5>
                            <pre class="whitespace-pre-wrap"><code>async function login(email, password) {
    const res = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
    });
    if (!res.ok) throw new Error('Login failed');
    const body = await res.json();
    localStorage.setItem('token', body.token);
    return body;
}
</code></pre>

                            <h5 class="font-medium mt-4 mb-2">Protected call (fetch)</h5>
                            <pre class="whitespace-pre-wrap"><code>async function fetchProtected(path) {
    const token = localStorage.getItem('token');
    const res = await fetch(path, { headers: { 'Authorization': 'Bearer ' + token } });
    if (!res.ok) throw new Error('Request failed');
    return res.json();
}
</code></pre>

                            <h5 class="font-medium mt-4 mb-2">Axios example</h5>
                            <pre class="whitespace-pre-wrap"><code>import axios from 'axios';
const api = axios.create({ baseURL: '/api' });
api.interceptors.request.use(cfg =&gt; {
    const token = localStorage.getItem('token');
    if (token) cfg.headers.Authorization = 'Bearer ' + token;
    return cfg;
});
</code></pre>

                            <h5 class="font-medium mt-4">Token storage</h5>
                            <ul class="list-disc list-inside text-sm text-gray-200">
                                <li><strong>localStorage</strong> — simple for SPAs, but vulnerable to XSS.</li>
                                <li><strong>httpOnly cookies</strong> — more secure against XSS; requires CSRF mitigation.</li>
                            </ul>
                        </div>
                    </section>

                    <section id="wire">
                        <h3 class="text-2xl font-semibold mb-3">How to wire this view to your routes</h3>
                        <p class="text-gray-700">The project's `Views.Routes.js` currently renders <code class="bg-gray-100 px-1 rounded">Documents</code>. Options:</p>
                        <ol class="list-decimal list-inside text-gray-700">
                            <li>Rename this file to <code class="bg-gray-100 px-1 rounded">Documents.ejs</code> — simplest.</li>
                            <li>Or update the route to <code class="bg-gray-100 px-1 rounded">res.render('document')</code> so it matches this filename.</li>
                        </ol>

                        <pre class="mt-3 bg-gray-100 p-3 rounded"><code>// Example change in Views.Routes.js
router.get('/documents', (req, res) =&gt; {
    res.render('document', { user: req.user || null });
});
</code></pre>
                    </section>

                    <section>
                        <h3 class="text-2xl font-semibold mb-3">Errors & troubleshooting</h3>
                        <ul class="list-disc list-inside text-gray-700">
                            <li>401 — missing/invalid token</li>
                            <li>403 — insufficient permissions</li>
                            <li>500 — server error — check logs</li>
                        </ul>
                    </section>

                    <section class="text-sm text-gray-500">
                        <strong>Notes</strong>
                        <p>Consider adding an OpenAPI/Swagger spec for machine-readable docs and autogenerated clients.</p>
                    </section>
                </article>
            </section>
        </main>

        <footer class="py-10 text-center bg-gray-900 text-gray-400 text-sm">
            <div class="max-w-6xl mx-auto px-6">
                Built with ❤️ using Node.js, Express, and TailwindCSS · © <script>document.write(new Date().getFullYear())</script> TripBcknd
            </div>
        </footer>

        <script src="https://unpkg.com/aos@2.3.4/dist/aos.js"></script>
        <script>
            AOS.init({ duration: 800, once: true });
        </script>
    </body>
</html>
